<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jan 14 16:45:49 2025
<BR><P>
<H3>Maximum Stack Usage =       1488 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
f_setcfg &rArr; tag_start &rArr; tag_pdoa_task &rArr;  tag_pdoa_task (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[110]">dwt_readfromdevice</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[111]">dwt_xfer3000</a><BR>
 <LI><a href="#[299]">tag_pdoa_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[299]">tag_pdoa_task</a><BR>
 <LI><a href="#[27f]">node_pdoa_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27f]">node_pdoa_task</a><BR>
 <LI><a href="#[25c]">r95Sort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25c]">r95Sort</a><BR>
 <LI><a href="#[35]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">AT_CmdFunc_ANCHOR_GPIOTEST</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[18]">AT_CmdFunc_AT</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[16]">AT_CmdFunc_FACTORY</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[17]">AT_CmdFunc_GETWORKMODE</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[13]">AT_CmdFunc_RFTEST</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[14]">AT_CmdFunc_RSSI</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[11]">AT_CmdFunc_RST</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[15]">AT_CmdFunc_UwbMac</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[10]">AT_CmdFunc_version</a> from ait_cmd.o(.text) referenced 2 times from ait_cmd.o(.data)
 <LI><a href="#[1d]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">DMA1_Channel4_IRQHandler</a> from generic_cmd.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">DMA1_Channel5_IRQHandler</a> from generic_cmd.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">EP1_IN_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[3]">EP3_OUT_Callback</a> from usb_endp.o(.text) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[29]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">NOP_Process</a> from usb_core.o(.text) referenced 38 times from usb_istr.o(.data)
 <LI><a href="#[24]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1dd]">Standard_GetConfiguration</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[1de]">Standard_GetInterface</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[1dc]">Standard_GetStatus</a> from usb_core.o(.text) referenced from usb_core.o(.text)
 <LI><a href="#[22]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[25]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from hal_usart.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">USBWakeUp_IRQHandler</a> from usb_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USB_LP_CAN1_RX0_IRQHandler</a> from usb_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">Virtual_Com_Port_Data_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">Virtual_Com_Port_GetConfigDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">Virtual_Com_Port_GetDeviceDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1cc]">Virtual_Com_Port_GetLineCoding</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[d]">Virtual_Com_Port_GetStringDescriptor</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">Virtual_Com_Port_Get_Interface_Setting</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">Virtual_Com_Port_NoData_Setup</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">Virtual_Com_Port_Reset</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">Virtual_Com_Port_SetConfiguration</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">Virtual_Com_Port_SetDeviceAddress</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1cd]">Virtual_Com_Port_SetLineCoding</a> from usb_prop.o(.text) referenced from usb_prop.o(.text)
 <LI><a href="#[6]">Virtual_Com_Port_Status_In</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">Virtual_Com_Port_Status_Out</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">Virtual_Com_Port_init</a> from usb_prop.o(.text) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[52]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[51]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[54]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[54]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[55]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[67]">f_addtag</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[64]">f_deca</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[68]">f_deltag</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[63]">f_distance</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6b]">f_filter</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5a]">f_getcfg</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5c]">f_getdev</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[65]">f_getdlist</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[70]">f_getewbmode</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[66]">f_getklist</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[60]">f_getsensor</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[56]">f_getver</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5e]">f_getworkmode</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6d]">f_pdoagetcfg</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[69]">f_pdoaoff</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6c]">f_pdoasetcfg</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[58]">f_restart</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[59]">f_restore</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6a]">f_rngoff</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[57]">f_save</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5b]">f_setcfg</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5d]">f_setdev</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[71]">f_setuwbmode</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[5f]">f_setworkmode</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[72]">f_test</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[61]">f_testled</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[62]">f_testoled</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6e]">f_uart_rate</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[6f]">f_user_cmd</a> from cmd_fn.o(.text) referenced from cmd_fn.o(.constdata)
 <LI><a href="#[53]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[27c]">twr_rx_error_cb</a> from node.o(.text) referenced from node.o(.text)
 <LI><a href="#[27a]">twr_rx_node_cb</a> from node.o(.text) referenced from node.o(.text)
 <LI><a href="#[290]">twr_rx_tag_cb</a> from tag.o(.text) referenced from tag.o(.text)
 <LI><a href="#[292]">twr_rx_tag_error_cb</a> from tag.o(.text) referenced from tag.o(.text)
 <LI><a href="#[291]">twr_rx_tag_timeout_cb</a> from tag.o(.text) referenced from tag.o(.text)
 <LI><a href="#[27b]">twr_rx_timeout_cb</a> from node.o(.text) referenced from node.o(.text)
 <LI><a href="#[279]">twr_tx_node_cb</a> from node.o(.text) referenced from node.o(.text)
 <LI><a href="#[28f]">twr_tx_tag_cb</a> from tag.o(.text) referenced from tag.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[73]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2db]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2dc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2dd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2de]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2df]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2e0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[79]"></a>string_split</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = string_split
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
</UL>

<P><STRONG><a name="[75]"></a>command_parser</STRONG> (Thumb, 212 bytes, Stack size 168 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = command_parser &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_split
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USB_CMD
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USART_CMD
</UL>

<P><STRONG><a name="[56]"></a>f_getver</STRONG> (Thumb, 42 bytes, Stack size 72 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_getver &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>f_save</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = f_save &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>f_restore</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = f_restore &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>f_restart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_restart &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>f_setcfg</STRONG> (Thumb, 226 bytes, Stack size 288 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = f_setcfg &rArr; tag_start &rArr; tag_pdoa_task &rArr;  tag_pdoa_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>f_getcfg</STRONG> (Thumb, 78 bytes, Stack size 280 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_getcfg &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>f_setworkmode</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_setworkmode &rArr; OLED_CLS &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>f_getworkmode</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_getworkmode &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>f_setdev</STRONG> (Thumb, 258 bytes, Stack size 344 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = f_setdev &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>f_getdev</STRONG> (Thumb, 114 bytes, Stack size 336 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_getdev &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>f_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>f_getsensor</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_getsensor &rArr; drv_lis2dh12_get_angle &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>f_testled</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_testled &rArr; flow_light &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Mode_Set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>remove_newline_chars</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testoled
</UL>

<P><STRONG><a name="[62]"></a>f_testoled</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_testoled &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_newline_chars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>f_distance</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_distance &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>f_deca</STRONG> (Thumb, 164 bytes, Stack size 272 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_deca &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>f_getdlist</STRONG> (Thumb, 140 bytes, Stack size 184 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_getdlist &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDList
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDList_size
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDList
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>f_getklist</STRONG> (Thumb, 140 bytes, Stack size 184 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = f_getklist &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knownTagList_size
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_knownTagList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_json_tag
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>f_addtag</STRONG> (Thumb, 218 bytes, Stack size 192 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_addtag &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tag_to_knownTagList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_json_tag
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>f_deltag</STRONG> (Thumb, 154 bytes, Stack size 184 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_deltag &rArr; strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag64_from_knownTagList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag16_from_knownTagList
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>f_pdoaoff</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_pdoaoff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>f_rngoff</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_rngoff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>f_filter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_filter &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>f_pdoasetcfg</STRONG> (Thumb, 186 bytes, Stack size 320 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_pdoasetcfg &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>f_pdoagetcfg</STRONG> (Thumb, 88 bytes, Stack size 296 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_pdoagetcfg &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>f_uart_rate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_uart_rate &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>f_user_cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_user_cmd &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>f_setuwbmode</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_setuwbmode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>f_getewbmode</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_getewbmode &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_fn.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>App_Module_sys_para_debug</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_Module_sys_para_debug &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Init
</UL>

<P><STRONG><a name="[2e1]"></a>Check_Sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, generic.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>App_Module_sys_para_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, generic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restore
</UL>

<P><STRONG><a name="[7d]"></a>App_Module_Sys_Write_NVM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restore
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_save
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[9c]"></a>App_Module_Sys_Read_NVM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Module_Sys_Read_NVM &rArr; HalRead_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRead_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
</UL>

<P><STRONG><a name="[9e]"></a>App_Module_sys_para_read</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = App_Module_sys_para_read &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Read_NVM
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Init
</UL>

<P><STRONG><a name="[a0]"></a>App_Module_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = App_Module_Init &rArr; App_Module_sys_para_read &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_CMD_Queue_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_debug
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[a2]"></a>App_Module_Sys_Work_Mode_Event</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, generic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = App_Module_Sys_Work_Mode_Event &rArr; App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USB_CMD
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USART_CMD
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Mode_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_task
</UL>

<P><STRONG><a name="[275]"></a>App_Module_Get_SysState_Usercmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
</UL>

<P><STRONG><a name="[a1]"></a>App_Module_CMD_Queue_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Module_CMD_Queue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CreateQueue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Init
</UL>

<P><STRONG><a name="[a3]"></a>App_Module_Process_USB_CMD</STRONG> (Thumb, 96 bytes, Stack size 160 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = App_Module_Process_USB_CMD &rArr; command_parser &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbRead
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_msg_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
</UL>

<P><STRONG><a name="[a4]"></a>App_Module_Process_USART_CMD</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Dequeue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_recv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
</UL>

<P><STRONG><a name="[aa]"></a>App_Module_Uart_Send</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
</UL>

<P><STRONG><a name="[7c]"></a>port_tx_msg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Uart_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getewbmode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setuwbmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoagetcfg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoasetcfg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deca
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_distance
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdev
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getworkmode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcfg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getver
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Tag_Module_UWB_Mode_Display
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_UWB_Mode_Display
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_to_pc_new_tag_discovered
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_GETWORKMODE
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
</UL>

<P><STRONG><a name="[ae]"></a>data_tx_msg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_tx_msg &rArr; HalUsbWrite &rArr; USB_TxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_pc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_pc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
</UL>

<P><STRONG><a name="[af]"></a>wifi_tx_msg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_tx_msg &rArr; USART2SendDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_wifi
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_wifi
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
</UL>

<P><STRONG><a name="[b7]"></a>get_Xor_CRC</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_Xor_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_format_conver_uint8
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_pc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_pc
</UL>

<P><STRONG><a name="[32]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 144 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; osal_Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Enqueue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_recv_msg_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>App_Module_format_conver_uint8</STRONG> (Thumb, 220 bytes, Stack size 28 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Module_format_conver_uint8 &rArr; get_Xor_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Xor_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
</UL>

<P><STRONG><a name="[2e2]"></a>set_aiio_output_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_out.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>get_aiio_output_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_out.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[b8]"></a>node_twr_output_user</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, user_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = node_twr_output_user &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[bb]"></a>tag_twr_output_user</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, user_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tag_twr_output_user &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[bc]"></a>node_pdoa_output_user</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, user_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = node_pdoa_output_user &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[bd]"></a>tag_pdoa_output_user</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, user_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tag_pdoa_output_user &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[be]"></a>Hal_Driver_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hal_drivers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hal_Driver_Init &rArr; Hal_I2C_LCD_Init &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSpiInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIis2dh12Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalFlashInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Read_NVM
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[c1]"></a>HalFlashInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[9b]"></a>HalWrite_Flash</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
</UL>

<P><STRONG><a name="[9d]"></a>HalRead_Flash</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HalRead_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Read_NVM
</UL>

<P><STRONG><a name="[c6]"></a>Hal_I2C_LCD_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hal_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hal_I2C_LCD_Init &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[c7]"></a>Hal_I2C_Sensor_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Hal_I2C_Sensor_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[d6]"></a>HalI2cInit</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, hal_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HalI2cInit &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>

<P><STRONG><a name="[d7]"></a>Screen_Cleaning</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[d9]"></a>OLED_Display</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, hal_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Display &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[db]"></a>HalLedSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_led.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Blink
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Mode_Set
</UL>

<P><STRONG><a name="[c2]"></a>HalLedInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HalLedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[8a]"></a>HalLed_Mode_Set</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HalLed_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testled
</UL>

<P><STRONG><a name="[89]"></a>flow_light</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hal_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = flow_light &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Mode_Set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testled
</UL>

<P><STRONG><a name="[df]"></a>HalLed_Blink</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HalLed_Blink
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>Hal_DECA_KEY_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Hal_DECA_KEY_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDecaExitInit
</UL>

<P><STRONG><a name="[e2]"></a>HalDecaExitInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HalDecaExitInit &rArr; Hal_DECA_KEY_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DECA_KEY_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
</UL>

<P><STRONG><a name="[e5]"></a>Hal_SPI1_Deca_Init</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hal_SPI1_Deca_Init &rArr; HalDecaExitInit &rArr; Hal_DECA_KEY_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDecaExitInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSpiInit
</UL>

<P><STRONG><a name="[c4]"></a>HalSpiInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HalSpiInit &rArr; Hal_SPI1_Deca_Init &rArr; HalDecaExitInit &rArr; Hal_DECA_KEY_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[7e]"></a>HalDelay_nMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restore
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_save
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[210]"></a>HalDelayTime_Counter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ea]"></a>HalTimer2_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HalTimer2_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[c0]"></a>HalTimerInit</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, hal_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HalTimerInit &rArr; HalTimer2_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimer2_NVIC_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[f4]"></a>HalIWDG_Feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>USART1_SendBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Uart_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>

<P><STRONG><a name="[7a]"></a>_dbg_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_output_user
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_output_user
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_twr_output_user
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_twr_output_user
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Dequeue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_recv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_debug
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restore
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_save
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_bssConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_node_cb
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_TraverseQueue
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_parse
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_UwbMac
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_RST
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_version
</UL>

<P><STRONG><a name="[f9]"></a>HalUASRT1_DMA_Config</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HalUASRT1_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[ff]"></a>HalUSART1_DMA_TX_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HalUSART1_DMA_TX_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[100]"></a>HalUSART1_DMA_RX_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HalUSART1_DMA_RX_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[101]"></a>USART2SendByteData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2SendByteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>USART2SendDatas</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2SendDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tx_msg
</UL>

<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendByteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>HalUARTInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, hal_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HalUARTInit &rArr; HalUASRT1_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART1_DMA_RX_NVIC_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART1_DMA_TX_NVIC_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[c5]"></a>HalUsbInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HalUsbInit &rArr; Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[a6]"></a>HalUsbRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HalUsbRead &rArr; USB_RxRead &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RxRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USB_CMD
</UL>

<P><STRONG><a name="[ad]"></a>HalUsbWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HalUsbWrite &rArr; USB_TxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TxWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_tx_msg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
</UL>

<P><STRONG><a name="[2e3]"></a>dwt_apiversion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>dwt_setlocaldataptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>dwt_readfromdevice</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_do_aes
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_geteui
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp_sts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp_ipatov
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestampunadj
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtdoa
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdiagnostics
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readcarrierintegrator
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read_rx_scratch_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[112]"></a>dwt_read8bitoffsetreg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dwt_read8bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_do_aes
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeupvbat
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readwakeuptemp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkirq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readpgdelay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>

<P><STRONG><a name="[113]"></a>dwt_generatecrc8</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dwt_generatecrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>

<P><STRONG><a name="[116]"></a>dwt_writetodevice</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_do_aes
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_signal_rx_buff_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_seteui
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[117]"></a>dwt_wakeup_ic</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_device_with_io
</UL>

<P><STRONG><a name="[119]"></a>dwt_read32bitoffsetreg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readeventcounters
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystimestamphi32
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamplo32
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamphi32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamplo32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamphi32
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[11a]"></a>dwt_read16bitoffsetreg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readpdoa
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsstatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readclockoffset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_pgf_cal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
</UL>

<P><STRONG><a name="[de]"></a>dwt_write32bitoffsetreg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_light
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_do_aes
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_set_keyreg_128
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_frames
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_cw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setreferencetrxtime
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestsmode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configmrxlut
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestsiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestskey
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rftx_blocks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rf_tx
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resync_sts
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[11b]"></a>dwt_write16bitoffsetreg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure_le_address
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure_aes
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setsniffmode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_clearaonconfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configureframefilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dwt_otp_write_wdata_id_reg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>

<P><STRONG><a name="[11c]"></a>dwt_write8bitoffsetreg</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_do_aes
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configeventcounters
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configciadiag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_clearaonconfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleep
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setplenfine
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[11d]"></a>dwt_modify32bitoffsetreg</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_modify32bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresfdtype
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdblrxbuffmode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestsmode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enablegpioclocks
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdwstate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rftx_blocks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_kick_dgc_on_wakeup
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
</UL>

<P><STRONG><a name="[11e]"></a>dwt_modify16bitoffsetreg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_modify16bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableautoack
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_pgf_cal
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_prog_ldo_and_bias_tune
</UL>

<P><STRONG><a name="[11f]"></a>dwt_modify8bitoffsetreg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_modify8bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtempvbat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_frames
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configciadiag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configureframefilter
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestsloadiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdwstate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enablespicrccheck
</UL>

<P><STRONG><a name="[120]"></a>dwt_enablespicrccheck</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
</UL>

<P><STRONG><a name="[122]"></a>dwt_readdevid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_readdevid &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_check_dev_id
</UL>

<P><STRONG><a name="[123]"></a>dwt_check_dev_id</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dwt_check_dev_id &rArr; dwt_readdevid &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[124]"></a>dwt_initialise</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_initialise &rArr; _dwt_otpread &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_check_dev_id
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_prog_ldo_and_bias_tune
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[126]"></a>AIT_dwt_getxtaltrim</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AIT_dwt_getxtaltrim &rArr; _dwt_otpread &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[127]"></a>AIT_dwt_otpread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>

<P><STRONG><a name="[128]"></a>__dwt_otp_write_wdata_id_reg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
</UL>

<P><STRONG><a name="[12b]"></a>dwt_otpwriteandverify</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dwt_otpwriteandverify &rArr; _dwt_otpprogword32 &rArr; __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_dwt_otpwriteandverify
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[12c]"></a>AIT_dwt_otpwriteandverify</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AIT_dwt_otpwriteandverify &rArr; dwt_otpwriteandverify &rArr; _dwt_otpprogword32 &rArr; __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
</UL>

<P><STRONG><a name="[12d]"></a>dwt_setdwstate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setdwstate &rArr; dwt_modify32bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[12f]"></a>dwt_enablegpioclocks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>

<P><STRONG><a name="[2e5]"></a>dwt_otprevision</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>dwt_setfinegraintxseq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setfinegraintxseq &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_cw
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[131]"></a>dwt_setlnapamode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setlnapamode &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[132]"></a>dwt_readpgdelay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[2e6]"></a>dwt_geticrefvolt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>dwt_geticreftemp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>dwt_getpartid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>

<P><STRONG><a name="[257]"></a>dwt_getlotid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>

<P><STRONG><a name="[134]"></a>dwt_calcbandwidthadj</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dwt_calcbandwidthadj &rArr; dwt_enable_rf_tx &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rftx_blocks
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rftx_blocks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rf_tx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
</UL>

<P><STRONG><a name="[138]"></a>dwt_configuretxrf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dwt_configuretxrf &rArr; dwt_calcbandwidthadj &rArr; dwt_enable_rf_tx &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
</UL>

<P><STRONG><a name="[139]"></a>dwt_configurestskey</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[13a]"></a>dwt_configurestsiv</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[13b]"></a>dwt_configurestsloadiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resync_sts
</UL>

<P><STRONG><a name="[13c]"></a>dwt_configmrxlut</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_configmrxlut &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
</UL>

<P><STRONG><a name="[13d]"></a>dwt_restoreconfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configmrxlut
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_kick_dgc_on_wakeup
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_prog_ldo_and_bias_tune
</UL>

<P><STRONG><a name="[13f]"></a>dwt_configurestsmode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>

<P><STRONG><a name="[140]"></a>dwt_run_pgfcal</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_usleep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_pgf_cal
</UL>

<P><STRONG><a name="[142]"></a>dwt_pgf_cal</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[143]"></a>dwt_setplenfine</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setplenfine &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[144]"></a>dwt_configure</STRONG> (Thumb, 866 bytes, Stack size 40 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setplenfine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_pgf_cal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configmrxlut
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdwstate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sts_mnth
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_kick_dgc_on_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[14a]"></a>dwt_setrxantennadelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setrxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[14b]"></a>dwt_settxantennadelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_settxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[14c]"></a>dwt_writetxdata</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_writetxdata &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[14d]"></a>dwt_writetxfctrl</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_writetxfctrl &rArr; dwt_modify32bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[14e]"></a>dwt_read_rx_scratch_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[14f]"></a>dwt_readrxdata</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_readrxdata &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_node_cb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[150]"></a>dwt_readaccdata</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_readaccdata &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[151]"></a>dwt_readclockoffset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_readclockoffset &rArr; dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[152]"></a>dwt_readcarrierintegrator</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[153]"></a>dwt_readstsquality</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_readstsquality &rArr; dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_node_cb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[154]"></a>dwt_readstsstatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_status_errors
</UL>

<P><STRONG><a name="[155]"></a>dwt_readdiagnostics</STRONG> (Thumb, 1556 bytes, Stack size 256 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dwt_readdiagnostics &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[156]"></a>dwt_readtxtimestamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dwt_readtxtimestamp &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_tx_tag_cb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_tx_node_cb
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
</UL>

<P><STRONG><a name="[157]"></a>dwt_readtxtimestamphi32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[158]"></a>dwt_readtxtimestamplo32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[159]"></a>dwt_readpdoa</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_readpdoa &rArr; dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[15a]"></a>dwt_readtdoa</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[15b]"></a>dwt_readrxtimestamp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dwt_readrxtimestamp &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_node_cb
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
</UL>

<P><STRONG><a name="[15c]"></a>dwt_readrxtimestampunadj</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[15d]"></a>dwt_readrxtimestamp_ipatov</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[15e]"></a>dwt_readrxtimestamp_sts</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[15f]"></a>dwt_readrxtimestamphi32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[160]"></a>dwt_readrxtimestamplo32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[161]"></a>dwt_readsystimestamphi32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>

<P><STRONG><a name="[162]"></a>dwt_readsystime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[163]"></a>dwt_configureframefilter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_configureframefilter &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[164]"></a>dwt_setpanid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setpanid &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[165]"></a>dwt_setaddress16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setaddress16 &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[166]"></a>dwt_seteui</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>

<P><STRONG><a name="[167]"></a>dwt_geteui</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[168]"></a>dwt_aon_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
</UL>

<P><STRONG><a name="[169]"></a>dwt_aon_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuresleepcnt
</UL>

<P><STRONG><a name="[16a]"></a>dwt_otpread</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_otpread &rArr; _dwt_otpread &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
</UL>

<P><STRONG><a name="[16b]"></a>dwt_entersleep</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[16c]"></a>dwt_configuresleepcnt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_write
</UL>

<P><STRONG><a name="[16d]"></a>dwt_calibratesleepcnt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_aon_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
</UL>

<P><STRONG><a name="[16e]"></a>dwt_configuresleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[16f]"></a>dwt_clearaonconfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
</UL>

<P><STRONG><a name="[170]"></a>dwt_entersleepaftertx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
</UL>

<P><STRONG><a name="[171]"></a>dwt_configciadiag</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_configciadiag &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[172]"></a>dwt_enableautoack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[173]"></a>dwt_signal_rx_buff_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_signal_rx_buff_free &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
</UL>

<P><STRONG><a name="[174]"></a>dwt_setdblrxbuffmode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>

<P><STRONG><a name="[175]"></a>dwt_setrxaftertxdelay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[282]"></a>dwt_setcallbacks</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dwt_setcallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
</UL>

<P><STRONG><a name="[176]"></a>dwt_checkirq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[177]"></a>dwt_checkidlerc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dwt_checkidlerc &rArr; dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[178]"></a>dwt_isr</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_isr &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_signal_rx_buff_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
</UL>

<P><STRONG><a name="[179]"></a>dwt_setleds</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setleds &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[17a]"></a>dwt_setreferencetrxtime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[17b]"></a>dwt_setdelayedtrxtime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setdelayedtrxtime &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_delayed_rx_time
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[17c]"></a>dwt_starttx</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_starttx &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[17d]"></a>dwt_forcetrxoff</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_forcetrxoff &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[180]"></a>dwt_setsniffmode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[181]"></a>dwt_rxenable</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_rxenable &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_error_cb
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_timeout_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[182]"></a>dwt_setrxtimeout</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_resp_rx_timeout
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_error_cb
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_timeout_cb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[183]"></a>dwt_setpreambledetecttimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setpreambledetecttimeout &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[184]"></a>dwt_setinterrupt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_setinterrupt &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
</UL>

<P><STRONG><a name="[185]"></a>dwt_configeventcounters</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_configeventcounters &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[186]"></a>dwt_readeventcounters</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dwt_readeventcounters &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[187]"></a>dwt_softreset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_clearaonconfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>

<P><STRONG><a name="[188]"></a>dwt_setxtaltrim</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setxtaltrim &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[23f]"></a>dwt_getxtaltrim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[189]"></a>dwt_repeated_cw</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
</UL>

<P><STRONG><a name="[18a]"></a>dwt_repeated_frames</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
</UL>

<P><STRONG><a name="[18b]"></a>dwt_configcwmode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_cw
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rftx_blocks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
</UL>

<P><STRONG><a name="[18c]"></a>dwt_configcontinuousframemode</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_repeated_frames
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rftx_blocks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
</UL>

<P><STRONG><a name="[18d]"></a>dwt_readtempvbat</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[18e]"></a>dwt_convertrawtemperature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[191]"></a>dwt_convertrawvoltage</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[193]"></a>dwt_readwakeuptemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[194]"></a>dwt_readwakeupvbat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>

<P><STRONG><a name="[195]"></a>dwt_calcpgcount</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rftx_blocks
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rftx_blocks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_disable_rf_tx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_force_clocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_rf_tx
</UL>

<P><STRONG><a name="[196]"></a>dwt_configure_aes</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[2e8]"></a>dwt_mic_size_from_bytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>dwt_set_keyreg_128</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>

<P><STRONG><a name="[198]"></a>dwt_do_aes</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[199]"></a>dwt_configure_le_address</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>

<P><STRONG><a name="[19a]"></a>dwt_configuresfdtype</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, deca_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>

<P><STRONG><a name="[17e]"></a>decamutexon</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITEnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[17f]"></a>decamutexoff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, deca_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[19c]"></a>I2C_Configuration</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, oled_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[19d]"></a>I2C_WriteByte</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[1a4]"></a>WriteCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_OFF
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ON
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>

<P><STRONG><a name="[1a5]"></a>WriteDat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[d4]"></a>OLED_Init</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Init &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
</UL>

<P><STRONG><a name="[1a6]"></a>OLED_SetPos</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[d5]"></a>OLED_Fill</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Cleaning
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[84]"></a>OLED_CLS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_CLS &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testoled
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
</UL>

<P><STRONG><a name="[1a7]"></a>OLED_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[1a8]"></a>OLED_OFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[8c]"></a>OLED_ShowStr</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, oled_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Cleaning
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testoled
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
</UL>

<P><STRONG><a name="[d8]"></a>OLED_ShowCN</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, oled_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Cleaning
</UL>

<P><STRONG><a name="[1a9]"></a>OLED_DrawBMP</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, oled_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>

<P><STRONG><a name="[10a]"></a>Set_System</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_System &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketCreate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[10b]"></a>Set_USBClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[2e9]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>Leave_LowPowerMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[10c]"></a>USB_Interrupts_Config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[1ad]"></a>USB_Cable_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[1ae]"></a>USB_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[10e]"></a>USB_RxRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_RxRead &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketOut
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbRead
</UL>

<P><STRONG><a name="[1b0]"></a>USB_RxWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_RxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[1b2]"></a>USB_TxRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_TxRead &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[10f]"></a>USB_TxWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_TxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbWrite
</UL>

<P><STRONG><a name="[1b3]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[1aa]"></a>QUEUE_PacketCreate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[1b1]"></a>QUEUE_PacketIn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QUEUE_PacketIn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RxWrite
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TxWrite
</UL>

<P><STRONG><a name="[1af]"></a>QUEUE_PacketOut</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QUEUE_PacketOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TxRead
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RxRead
</UL>

<P><STRONG><a name="[2ea]"></a>QUEUE_PacketLengthGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>QUEUE_PacketStartEndDifferentCharSplit</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>QUEUE_PacketStartEndCharSplit</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>QUEUE_PacketCharSplit</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>QUEUE_PacketDoubleEndCharSplit</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>QUEUE_StructCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>QUEUE_StructIn</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1b6]"></a>QUEUE_StructOut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2f0]"></a>QUEUE_StructCountGet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>EP1_IN_Callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EP1_IN_Callback &rArr; USB_TxRead &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TxRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>EP3_OUT_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EP3_OUT_Callback &rArr; USB_SIL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RxWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1bc]"></a>SOF_Callback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usb_endp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SOF_Callback &rArr; USB_TxRead &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TxRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[1bd]"></a>USB_Istr</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, usb_istr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Virtual_Com_Port_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Virtual_Com_Port_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1cd]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usb_prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[1c1]"></a>PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[1cf]"></a>PowerOff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[1c0]"></a>Suspend</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[1d0]"></a>Resume_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[1bf]"></a>Resume</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usb_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Resume &rArr; Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[1dd]"></a>Standard_GetConfiguration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[1d8]"></a>Standard_SetConfiguration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1de]"></a>Standard_GetInterface</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[1da]"></a>Standard_SetInterface</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1dc]"></a>Standard_GetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(.text)
</UL>
<P><STRONG><a name="[1d2]"></a>Standard_ClearFeature</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1db]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1d9]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[1ce]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
</UL>

<P><STRONG><a name="[1e0]"></a>Post0_Process</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Post0_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1e1]"></a>Setup0_Process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[1cb]"></a>SetDeviceAddress</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1e3]"></a>In0_Process</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[1e4]"></a>Out0_Process</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Out0_Process &rArr; DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[2]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usb_istr.o(.data)
<LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>USB_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUsbInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Config
</UL>

<P><STRONG><a name="[1be]"></a>CTR_LP</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, usb_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2f1]"></a>CTR_HP</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_int.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>UserToPMABufferCopy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[1e7]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[2f2]"></a>SetCNTR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>GetCNTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>SetISTR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>GetISTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>GetFNR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>SetDADDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>GetDADDR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[2f9]"></a>GetBTABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>SetENDPOINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>GetENDPOINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDouBleBuffEPStall
</UL>

<P><STRONG><a name="[1c4]"></a>SetEPType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[2fb]"></a>GetEPType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>SetEPTxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1ca]"></a>SetEPRxStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1e8]"></a>SetDouBleBuffEPStall</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, usb_regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetENDPOINT
</UL>

<P><STRONG><a name="[2fc]"></a>GetEPTxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>SetEPTxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[1bb]"></a>SetEPRxValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[2fe]"></a>SetEP_KIND</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>ClearEP_KIND</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[300]"></a>Set_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>SetEPDoubleBuff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>ClearEPDoubleBuff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>GetTxStallStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>GetRxStallStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>ClearEP_CTR_RX</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>ClearEP_CTR_TX</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>ToggleDTOG_RX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>ToggleDTOG_TX</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>ClearDTOG_RX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[1d3]"></a>ClearDTOG_TX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[309]"></a>SetEPAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>GetEPAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1c6]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1d6]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[1e6]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[1b8]"></a>SetEPTxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[30b]"></a>SetEPCountRxReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>SetEPRxCount</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[30c]"></a>GetEPTxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>GetEPRxCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[30d]"></a>SetEPDblBuffAddr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>SetEPDblBuf0Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>SetEPDblBuf1Addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>GetEPDblBuf0Addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>GetEPDblBuf1Addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>SetEPDblBuffCount</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>SetEPDblBuf0Count</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>SetEPDblBuf1Count</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>GetEPDblBuf0Count</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>GetEPDblBuf1Count</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>GetEPDblBufDir</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>FreeUserBuffer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>ToWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_regs.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>ByteSwap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1c2]"></a>USB_SIL_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_sil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[1ea]"></a>USB_SIL_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_sil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>

<P><STRONG><a name="[1ba]"></a>USB_SIL_Read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_sil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SIL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[1ec]"></a>I2C_WriteOneByte</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lis2dh12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_WriteOneByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelay_nMs
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dh12_iic_write_byte
</UL>

<P><STRONG><a name="[1ee]"></a>lis2dh12_iic_write_byte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lis2dh12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lis2dh12_iic_write_byte &rArr; I2C_WriteOneByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIis2dh12Init
</UL>

<P><STRONG><a name="[c8]"></a>HalIis2dh12Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lis2dh12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HalIis2dh12Init &rArr; lis2dh12_iic_write_byte &rArr; I2C_WriteOneByte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dh12_iic_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
</UL>

<P><STRONG><a name="[1ef]"></a>drv_lis2dh12_iic_read_byte</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, lis2dh12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = drv_lis2dh12_iic_read_byte &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACKPositionConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
</UL>

<P><STRONG><a name="[88]"></a>drv_lis2dh12_get_angle</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, lis2dh12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = drv_lis2dh12_get_angle &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
</UL>

<P><STRONG><a name="[1fa]"></a>RCC_Configuration_part</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_Configuration_part &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[20a]"></a>init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = init &rArr; Hal_Driver_Init &rArr; Hal_I2C_LCD_Init &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>nt_task</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = nt_task &rArr; ds_twr_sts_sdc_responder &rArr; App_Module_Sys_Work_Mode_Event &rArr; App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_bssConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = main &rArr; nt_task &rArr; ds_twr_sts_sdc_responder &rArr; App_Module_Sys_Work_Mode_Event &rArr; App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HardFault_Handler &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MemManage_Handler &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BusFault_Handler &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UsageFault_Handler &rArr; App_Module_Sys_Write_NVM &rArr; HalWrite_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Write_NVM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDelayTime_Counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTI9_5_IRQHandler &rArr; process_deca_irq &rArr; dwt_isr &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; HalLed_Blink
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIWDG_Feed
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLed_Blink
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Driver_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_DW1000RSTnIRQ
</UL>

<P><STRONG><a name="[e1]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART1_DMA_RX_NVIC_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART1_DMA_TX_NVIC_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimer2_NVIC_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_DECA_KEY_NVIC_Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_DW1000RSTnIRQ
</UL>

<P><STRONG><a name="[31a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
</UL>

<P><STRONG><a name="[fc]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
</UL>

<P><STRONG><a name="[31d]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuffer
</UL>

<P><STRONG><a name="[fd]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
</UL>

<P><STRONG><a name="[31e]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>DMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>DMA_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[320]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDecaExitInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_DW1000RSTnIRQ
</UL>

<P><STRONG><a name="[321]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[326]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[c9]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteMoreData
</UL>

<P><STRONG><a name="[327]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteMoreData
</UL>

<P><STRONG><a name="[328]"></a>FLASH_LockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[214]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[cb]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteMoreData
</UL>

<P><STRONG><a name="[216]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[217]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[218]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[21a]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[219]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[cc]"></a>FLASH_ProgramWord</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
</UL>

<P><STRONG><a name="[21b]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteMoreData
</UL>

<P><STRONG><a name="[21c]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[21d]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[21e]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[21f]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[329]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>FLASH_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalWrite_Flash
</UL>

<P><STRONG><a name="[32e]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>GPIO_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[222]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_DW1000RSTnIRQ
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
</UL>

<P><STRONG><a name="[32f]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_deca_irq
</UL>

<P><STRONG><a name="[330]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_device_with_io
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedSet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_device_with_io
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
</UL>

<P><STRONG><a name="[333]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_ANCHOR_GPIOTEST
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDecaExitInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_DW1000RSTnIRQ
</UL>

<P><STRONG><a name="[338]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>I2C_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[d3]"></a>I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[339]"></a>I2C_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>I2C_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[33a]"></a>I2C_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>I2C_GenerateSTART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[1a3]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[1ed]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[33c]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>I2C_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[1f0]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
</UL>

<P><STRONG><a name="[1a1]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[340]"></a>I2C_ReadRegister</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
</UL>

<P><STRONG><a name="[342]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>I2C_TransmitPEC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>I2C_CalculatePEC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>I2C_GetPEC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>I2C_ARPCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[34a]"></a>I2C_GetLastEvent</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_iic_read_byte
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[34b]"></a>I2C_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>I2C_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[f0]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[f1]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[f2]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIWDG_Feed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[f3]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[34e]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>RCC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[1fc]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[206]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[1fd]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[34f]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[205]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[207]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[208]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[200]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[202]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[201]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[351]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[203]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
</UL>

<P><STRONG><a name="[352]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_part
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[fa]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
</UL>

<P><STRONG><a name="[cf]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalLedInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_ANCHOR_GPIOTEST
</UL>

<P><STRONG><a name="[ce]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_Sensor_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_I2C_LCD_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[221]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[223]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[356]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>

<P><STRONG><a name="[e7]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>

<P><STRONG><a name="[224]"></a>I2S_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[35c]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>

<P><STRONG><a name="[35e]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_SPI1_Deca_Init
</UL>

<P><STRONG><a name="[364]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ec]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[36e]"></a>TIM_OC1Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[22b]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[22a]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[228]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[226]"></a>TIM_ICInit</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[22d]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[372]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[377]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[378]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[22e]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[230]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[232]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[231]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[233]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[37c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>TIM_SelectOCxM</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[105]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[3b3]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[106]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUARTInit
</UL>

<P><STRONG><a name="[fe]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUASRT1_DMA_Config
</UL>

<P><STRONG><a name="[3b6]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendByteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendDatas
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuffer
</UL>

<P><STRONG><a name="[103]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[3bb]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendByteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2SendDatas
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuffer
</UL>

<P><STRONG><a name="[109]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalUSART2_Init
</UL>

<P><STRONG><a name="[102]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[3c5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>AT_CmdFunc_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT_CmdFunc_version &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>AT_CmdFunc_RST</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT_CmdFunc_RST &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[3c6]"></a>FLASH_ReadHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ait_cmd.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>FLASH_ReadWord</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ait_cmd.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>FLASH_ReadMoreData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ait_cmd.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>FLASH_WriteMoreData</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ait_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>

<P><STRONG><a name="[23a]"></a>StringToHex</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StringToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
</UL>

<P><STRONG><a name="[3c9]"></a>StringToHex2</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ait_cmd.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>AT_CmdFunc_ANCHOR_GPIOTEST</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = AT_CmdFunc_ANCHOR_GPIOTEST &rArr; handle_gpio_test_cmd &rArr; Lzero
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[23b]"></a>rx_with_xtal_trim</STRONG> (Thumb, 454 bytes, Stack size 168 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rx_with_xtal_trim &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_getxtaltrim
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readclockoffset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_dwt_getxtaltrim
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_deca_irq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_RFTEST
</UL>

<P><STRONG><a name="[13]"></a>AT_CmdFunc_RFTEST</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AT_CmdFunc_RFTEST &rArr; rx_with_xtal_trim &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[241]"></a>rx_diagnostics</STRONG> (Thumb, 966 bytes, Stack size 40 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rx_diagnostics &rArr; dwt_readdiagnostics &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readeventcounters
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configeventcounters
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configciadiag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdiagnostics
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readaccdata
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_RSSI
</UL>

<P><STRONG><a name="[14]"></a>AT_CmdFunc_RSSI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AT_CmdFunc_RSSI &rArr; rx_diagnostics &rArr; dwt_readdiagnostics &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[245]"></a>CLI_strtoi</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLI_strtoi
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_UwbMac
</UL>

<P><STRONG><a name="[244]"></a>AIT_eui64_wr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AIT_eui64_wr &rArr; AIT_dwt_otpwriteandverify &rArr; dwt_otpwriteandverify &rArr; _dwt_otpprogword32 &rArr; __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpread
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_dwt_otpwriteandverify
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_UwbMac
</UL>

<P><STRONG><a name="[15]"></a>AT_CmdFunc_UwbMac</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AT_CmdFunc_UwbMac &rArr; AIT_eui64_wr &rArr; AIT_dwt_otpwriteandverify &rArr; dwt_otpwriteandverify &rArr; _dwt_otpprogword32 &rArr; __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_strtoi
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>AT_CmdFunc_FACTORY</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AT_CmdFunc_FACTORY &rArr; OLED_CLS &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>AT_CmdFunc_GETWORKMODE</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AT_CmdFunc_GETWORKMODE &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>AT_CmdFunc_AT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ait_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ait_cmd.o(.data)
</UL>
<P><STRONG><a name="[246]"></a>at_cmd_parse</STRONG> (Thumb, 460 bytes, Stack size 1040 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_recv
</UL>

<P><STRONG><a name="[a9]"></a>at_cmd_recv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USART_CMD
</UL>

<P><STRONG><a name="[a5]"></a>osal_CreateQueue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_CMD_Queue_Init
</UL>

<P><STRONG><a name="[247]"></a>osal_TraverseQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, osal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>

<P><STRONG><a name="[248]"></a>osal_FullQueue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, osal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Enqueue
</UL>

<P><STRONG><a name="[249]"></a>osal_EmptyQueue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Dequeue
</UL>

<P><STRONG><a name="[b2]"></a>osal_Enqueue</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_FullQueue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>osal_Dequeue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osal_Dequeue &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_EmptyQueue
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USART_CMD
</UL>

<P><STRONG><a name="[3ca]"></a>osal_itoa</STRONG> (Thumb, 72 bytes, Stack size 44 bytes, osal.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>osal_Str2Byte</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, osal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[24d]"></a>osal_Hex2Str</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, osal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[24e]"></a>display_to_lcd_tpdoa</STRONG> (Thumb, 118 bytes, Stack size 144 bytes, ds_twr_sts_sdc_initiator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = display_to_lcd_tpdoa &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[24f]"></a>discovery_process_t</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ds_twr_sts_sdc_initiator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = discovery_process_t &rArr; dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>

<P><STRONG><a name="[251]"></a>ranging_process_t</STRONG> (Thumb, 410 bytes, Stack size 88 bytes, ds_twr_sts_sdc_initiator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ranging_process_t &rArr; display_to_lcd_tpdoa &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_output_user
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aiio_output_state
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_msg_set_ts
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
</UL>

<P><STRONG><a name="[20e]"></a>ds_twr_sts_sdc_initiator</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, ds_twr_sts_sdc_initiator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ds_twr_sts_sdc_initiator &rArr; App_Module_Sys_Work_Mode_Event &rArr; App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_getlotid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_getpartid
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
</UL>

<P><STRONG><a name="[259]"></a>display_to_lcd_npdoa</STRONG> (Thumb, 118 bytes, Stack size 144 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = display_to_lcd_npdoa &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[25a]"></a>pdoa2XY</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pdoa2XY &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[25c]"></a>r95Sort</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = r95Sort &rArr;  r95Sort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r95Sort
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r95Sort
</UL>

<P><STRONG><a name="[25f]"></a>motionFilter</STRONG> (Thumb, 242 bytes, Stack size 264 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = motionFilter &rArr; fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r95Sort
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[262]"></a>discovery_process</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = discovery_process &rArr; signal_to_pc_new_tag_discovered &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_to_pc_new_tag_discovered
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag64_from_knownTagList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTagToDList
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
</UL>

<P><STRONG><a name="[266]"></a>ranging_process</STRONG> (Thumb, 864 bytes, Stack size 128 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ranging_process &rArr; send_to_pc_twr &rArr; send_to_pc_custom_twr_carfollow &rArr; App_Module_format_conver_uint8 &rArr; get_Xor_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_output_user
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aiio_output_state
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readpdoa
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag16_from_knownTagList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_msg_get_ts
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
</UL>

<P><STRONG><a name="[20d]"></a>ds_twr_sts_sdc_responder</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, ds_twr_sts_sdc_responder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = ds_twr_sts_sdc_responder &rArr; App_Module_Sys_Work_Mode_Event &rArr; App_Module_Process_USART_CMD &rArr; at_cmd_recv &rArr; at_cmd_parse &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpreambledetecttimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
</UL>

<P><STRONG><a name="[91]"></a>get_knownTagList</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
</UL>

<P><STRONG><a name="[92]"></a>get_knownTagList_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
</UL>

<P><STRONG><a name="[26e]"></a>init_knownTagList</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tag_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[263]"></a>get_tag64_from_knownTagList</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_tag64_from_knownTagList
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag64_from_knownTagList
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tag_to_knownTagList
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
</UL>

<P><STRONG><a name="[267]"></a>get_tag16_from_knownTagList</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_tag16_from_knownTagList
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag16_from_knownTagList
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tag_to_knownTagList
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[26f]"></a>get_free_slot_from_knownTagList</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tag_to_knownTagList
</UL>

<P><STRONG><a name="[96]"></a>add_tag_to_knownTagList</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = add_tag_to_knownTagList &rArr; get_tag64_from_knownTagList
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_slot_from_knownTagList
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag64_from_knownTagList
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag16_from_knownTagList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
</UL>

<P><STRONG><a name="[98]"></a>del_tag16_from_knownTagList</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = del_tag16_from_knownTagList &rArr; get_tag16_from_knownTagList
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag16_from_knownTagList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
</UL>

<P><STRONG><a name="[97]"></a>del_tag64_from_knownTagList</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = del_tag64_from_knownTagList &rArr; get_tag64_from_knownTagList
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag64_from_knownTagList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
</UL>

<P><STRONG><a name="[8e]"></a>getDList_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
</UL>

<P><STRONG><a name="[8d]"></a>getDList</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
</UL>

<P><STRONG><a name="[264]"></a>addTagToDList</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, tag_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addTagToDList
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
</UL>

<P><STRONG><a name="[90]"></a>initDList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tag_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
</UL>

<P><STRONG><a name="[270]"></a>kalmanFilter_A</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = kalmanFilter_A &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[271]"></a>node_output_pc</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = node_output_pc &rArr; data_tx_msg &rArr; HalUsbWrite &rArr; USB_TxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Xor_CRC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_tx_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[272]"></a>node_output_wifi</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = node_output_wifi &rArr; wifi_tx_msg &rArr; USART2SendDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tx_msg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[3cb]"></a>getTwrInfoPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, node.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>prepare_twr_fianl_msg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, node.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>twr_tx_node_cb</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = twr_tx_node_cb &rArr; dwt_readtxtimestamp &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> node.o(.text)
</UL>
<P><STRONG><a name="[27a]"></a>twr_rx_node_cb</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = twr_rx_node_cb &rArr; dwt_readrxdata &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> node.o(.text)
</UL>
<P><STRONG><a name="[27b]"></a>twr_rx_timeout_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = twr_rx_timeout_cb &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> node.o(.text)
</UL>
<P><STRONG><a name="[27c]"></a>twr_rx_error_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = twr_rx_error_cb &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> node.o(.text)
</UL>
<P><STRONG><a name="[27d]"></a>testapprun</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = testapprun &rArr; twr_uwb_process &rArr; OLED_Display &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configureframefilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_run
</UL>

<P><STRONG><a name="[27e]"></a>instance_run</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = instance_run &rArr; testapprun &rArr; twr_uwb_process &rArr; OLED_Display &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_task
</UL>

<P><STRONG><a name="[27f]"></a>node_pdoa_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + In Cycle
<LI>Call Chain = node_pdoa_task &rArr;  node_pdoa_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_task
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_run
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_task
</UL>

<P><STRONG><a name="[280]"></a>node_process_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = node_process_init &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setcallbacks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_deca_irq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_helper
</UL>

<P><STRONG><a name="[283]"></a>App_Module_UWB_Mode_Display</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = App_Module_UWB_Mode_Display &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
</UL>

<P><STRONG><a name="[284]"></a>node_helper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = node_helper &rArr; node_process_init &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_deca_irq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_start
</UL>

<P><STRONG><a name="[83]"></a>node_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = node_start &rArr; node_pdoa_task &rArr;  node_pdoa_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_helper
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_UWB_Mode_Display
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_task
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
</UL>

<P><STRONG><a name="[26b]"></a>portGetTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_instance_run
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_pc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_node_cb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[286]"></a>sleep_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_device_with_io
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
</UL>

<P><STRONG><a name="[149]"></a>Sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[141]"></a>deca_usleep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_run_pgfcal
</UL>

<P><STRONG><a name="[23e]"></a>reset_DWIC</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = reset_DWIC &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[287]"></a>SPI_ConfigFastRate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_ConfigFastRate &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_slowrate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
</UL>

<P><STRONG><a name="[288]"></a>port_set_dw_ic_spi_slowrate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uwb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>

<P><STRONG><a name="[23d]"></a>port_set_dw_ic_spi_fastrate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = port_set_dw_ic_spi_fastrate &rArr; SPI_ConfigFastRate &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigFastRate
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_eui64_wr
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[118]"></a>wakeup_device_with_io</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uwb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_wakeup_ic
</UL>

<P><STRONG><a name="[12a]"></a>deca_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calibratesleepcnt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpprogword32
</UL>

<P><STRONG><a name="[19b]"></a>EXTI_GetITEnStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
</UL>

<P><STRONG><a name="[289]"></a>setup_DW1000RSTnIRQ</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, uwb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[114]"></a>writetospi_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>

<P><STRONG><a name="[115]"></a>readfromspi_serial</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_xfer3000
</UL>

<P><STRONG><a name="[211]"></a>process_deca_irq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uwb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = process_deca_irq &rArr; dwt_isr &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_isr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>disable_deca_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[285]"></a>enable_deca_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uwb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_helper
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_helper
</UL>

<P><STRONG><a name="[256]"></a>get_pbssConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_initiator
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_instance_run
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[20c]"></a>load_bssConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = load_bssConfig &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
</UL>

<P><STRONG><a name="[3cd]"></a>getTwrInfoPtr_tag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tag.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>twr_tx_tag_cb</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = twr_tx_tag_cb &rArr; tag_received_timeout_set &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag.o(.text)
</UL>
<P><STRONG><a name="[290]"></a>twr_rx_tag_cb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = twr_rx_tag_cb &rArr; tag_received_timeout_set &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsquality
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag.o(.text)
</UL>
<P><STRONG><a name="[291]"></a>twr_rx_tag_timeout_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = twr_rx_tag_timeout_cb &rArr; tag_received_timeout_set &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_error_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag.o(.text)
</UL>
<P><STRONG><a name="[292]"></a>twr_rx_tag_error_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = twr_rx_tag_error_cb &rArr; twr_rx_tag_timeout_cb &rArr; tag_received_timeout_set &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_timeout_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tag.o(.text)
</UL>
<P><STRONG><a name="[293]"></a>tag_output_pc</STRONG> (Thumb, 172 bytes, Stack size 120 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tag_output_pc &rArr; data_tx_msg &rArr; HalUsbWrite &rArr; USB_TxWrite &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Xor_CRC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_tx_msg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[294]"></a>tag_output_wifi</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tag_output_wifi &rArr; wifi_tx_msg &rArr; USART2SendDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tx_msg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[295]"></a>tagtestapprun</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tagtestapprun &rArr; tx_start &rArr; dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_twr_output_user
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aiio_output_state
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configureframefilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setlnapamode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setfinegraintxseq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_wifi
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_pc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_final_msg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_instance_run
</UL>

<P><STRONG><a name="[298]"></a>tag_instance_run</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tag_instance_run &rArr; tagtestapprun &rArr; tx_start &rArr; dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_task
</UL>

<P><STRONG><a name="[299]"></a>tag_pdoa_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + In Cycle
<LI>Call Chain = tag_pdoa_task &rArr;  tag_pdoa_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Sys_Work_Mode_Event
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_task
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_instance_run
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_task
</UL>

<P><STRONG><a name="[29a]"></a>tag_process_init</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tag_process_init &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_checkidlerc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setcallbacks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pbssConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DWIC
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_set_dw_ic_spi_fastrate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_deca_irq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_helper
</UL>

<P><STRONG><a name="[29b]"></a>App_Tag_Module_UWB_Mode_Display</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = App_Tag_Module_UWB_Mode_Display &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
</UL>

<P><STRONG><a name="[29c]"></a>tag_helper</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tag_helper &rArr; tag_process_init &rArr; dwt_configure &rArr; dwt_pgf_cal &rArr; dwt_run_pgfcal &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_deca_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_start
</UL>

<P><STRONG><a name="[82]"></a>tag_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = tag_start &rArr; tag_pdoa_task &rArr;  tag_pdoa_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_helper
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Tag_Module_UWB_Mode_Display
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_task
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_task
</UL>

<P><STRONG><a name="[265]"></a>signal_to_pc_new_tag_discovered</STRONG> (Thumb, 102 bytes, Stack size 184 bytes, json_2pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = signal_to_pc_new_tag_discovered &rArr; port_tx_msg &rArr; App_Module_Uart_Send &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
</UL>

<P><STRONG><a name="[29d]"></a>send_to_pc_custom_twr_carfollow</STRONG> (Thumb, 138 bytes, Stack size 200 bytes, json_2pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = send_to_pc_custom_twr_carfollow &rArr; App_Module_format_conver_uint8 &rArr; get_Xor_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_format_conver_uint8
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tx_msg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_tx_msg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
</UL>

<P><STRONG><a name="[26d]"></a>send_to_pc_twr</STRONG> (Thumb, 294 bytes, Stack size 328 bytes, json_2pc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = send_to_pc_twr &rArr; send_to_pc_custom_twr_carfollow &rArr; App_Module_format_conver_uint8 &rArr; get_Xor_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_tx_msg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_tx_msg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[29e]"></a>check_for_status_errors</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readstsstatus
</UL>

<P><STRONG><a name="[2a2]"></a>get_rx_delay_time_txpreamble</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_resp_rx_timeout
</UL>

<P><STRONG><a name="[2a1]"></a>get_rx_delay_time_data_rate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_resp_rx_timeout
</UL>

<P><STRONG><a name="[29f]"></a>set_delayed_rx_time</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
</UL>

<P><STRONG><a name="[2a0]"></a>set_resp_rx_timeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_delay_time_data_rate
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_delay_time_txpreamble
</UL>

<P><STRONG><a name="[2a3]"></a>resync_sts</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configurestsloadiv
</UL>

<P><STRONG><a name="[3ce]"></a>resp_msg_get_ts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shared_functions.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>get_tx_timestamp_u64</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, shared_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_tx_timestamp_u64 &rArr; dwt_readtxtimestamp &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[253]"></a>get_rx_timestamp_u64</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, shared_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_rx_timestamp_u64 &rArr; dwt_readrxtimestamp &rArr; dwt_readfromdevice &rArr;  dwt_xfer3000 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[268]"></a>final_msg_get_ts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shared_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = final_msg_get_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[254]"></a>final_msg_set_ts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, shared_functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = final_msg_set_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[2a4]"></a>resp_msg_set_ts</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, shared_functions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>

<P><STRONG><a name="[281]"></a>calculate_msg_time</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, msg_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = calculate_msg_time &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_sy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
</UL>

<P><STRONG><a name="[274]"></a>util_us_to_dev_time</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = util_us_to_dev_time &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_final_msg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
</UL>

<P><STRONG><a name="[2a8]"></a>util_dev_time_to_sec</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[2aa]"></a>util_sec_to_dev_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[28c]"></a>util_us_to_sy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = util_us_to_sy &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
</UL>

<P><STRONG><a name="[3cf]"></a>calc_sfd_to</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, util.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resp_msg_set_ts
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Str2Byte
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Enqueue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Dequeue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Uart_Send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_StructOut
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_StructIn
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lzero
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Uart_Send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_sys_para_Init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
</UL>

<P><STRONG><a name="[3d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Dequeue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag64_from_knownTagList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_tag16_from_knownTagList
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_knownTagList
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USB_CMD
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_CMD_Queue_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getewbmode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setuwbmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoagetcfg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoasetcfg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deca
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_distance
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testled
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdev
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getworkmode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcfg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getver
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lzero
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Tag_Module_UWB_Mode_Display
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_process_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_output_wifi
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_UWB_Mode_Display
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_process_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_wifi
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_to_pc_new_tag_discovered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_parse
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_GETWORKMODE
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[3d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_parse
</UL>

<P><STRONG><a name="[78]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getewbmode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setuwbmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoagetcfg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoasetcfg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deca
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_distance
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdev
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getworkmode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcfg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getver
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_parser
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lzero
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_to_pc_new_tag_discovered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_parse
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_GETWORKMODE
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_UwbMac
</UL>

<P><STRONG><a name="[250]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds_twr_sts_sdc_responder
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_process_t
</UL>

<P><STRONG><a name="[95]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
</UL>

<P><STRONG><a name="[94]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
</UL>

<P><STRONG><a name="[81]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setuwbmode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_user_cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_uart_rate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoasetcfg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_filter
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rngoff
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoaoff
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_testled
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawvoltage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawtemperature
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalmanFilter_A
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalmanFilter_A
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawvoltage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawtemperature
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalmanFilter_A
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process_t
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawvoltage
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalmanFilter_A
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>

<P><STRONG><a name="[192]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawvoltage
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[3d5]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[2b8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dev_time_to_sec
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_output_user
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_output_user
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_twr_output_user
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_twr_output_user
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_sec_to_dev_time
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_sy
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1f7]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[3d6]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawvoltage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_convertrawtemperature
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_twr_output_user
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_twr_output_user
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_final_msg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dev_time_to_sec
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_custom_twr_carfollow
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_received_timeout_set
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
</UL>

<P><STRONG><a name="[269]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_sec_to_dev_time
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_pdoa_output_user
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_pdoa_output_user
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_distance
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdev
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Tag_Module_UWB_Mode_Display
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_UWB_Mode_Display
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
</UL>

<P><STRONG><a name="[3d7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r95Sort
</UL>

<P><STRONG><a name="[25d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r95Sort
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_with_xtal_trim
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
</UL>

<P><STRONG><a name="[3d8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3da]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[53]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2af]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2bd]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[2b1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2b0]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[3db]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2b2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[2b7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2b6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[2bf]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2c0]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3dc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2bc]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2c3]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[51]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2be]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>

<P><STRONG><a name="[3dd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3df]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[8f]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Tag_Module_UWB_Mode_Display
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_UWB_Mode_Display
</UL>

<P><STRONG><a name="[3e0]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3e1]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2c7]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e2]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_Cleaning
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalI2cInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getewbmode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoagetcfg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_pdoasetcfg
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deltag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdlist
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deca
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_distance
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getsensor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getdev
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getworkmode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcfg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setcfg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getver
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_json_tag
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_to_pc_new_tag_discovered
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pc_twr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_npdoa
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_to_lcd_tpdoa
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_Hex2Str
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_GETWORKMODE
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_FACTORY
</UL>

<P><STRONG><a name="[3e3]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3e4]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2c8]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e5]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3e6]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3e7]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[f8]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
</UL>

<P><STRONG><a name="[2d8]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3e8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2c9]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2ca]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2cb]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2cc]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2cd]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2ce]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2cf]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2d0]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[2d1]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[2d2]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[2d9]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[3e9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3ea]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3eb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2d7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2c4]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1f6]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
</UL>

<P><STRONG><a name="[26c]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ranging_process
</UL>

<P><STRONG><a name="[85]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setdev
</UL>

<P><STRONG><a name="[3ec]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ceilf.o(i.ceilf), UNUSED)

<P><STRONG><a name="[2a6]"></a>ceilf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ceilf.o(i.ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ceilf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_msg_time
</UL>

<P><STRONG><a name="[260]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionFilter
</UL>

<P><STRONG><a name="[242]"></a>log10f</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, log10f.o(i.log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = log10f &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[1f2]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_diagnostics
</UL>

<P><STRONG><a name="[1f4]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lis2dh12_get_angle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoa2XY
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cmd_fn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setworkmode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_restore
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_save
</UL>

<P><STRONG><a name="[93]"></a>fill_json_tag</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, cmd_fn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fill_json_tag &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_addtag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getklist
</UL>

<P><STRONG><a name="[a7]"></a>usart1_recv_msg_handler</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, generic_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart1_recv_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Process_USB_CMD
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalTimerInit
</UL>

<P><STRONG><a name="[108]"></a>HalUSART2_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hal_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[111]"></a>dwt_xfer3000</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_generatecrc8
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify8bitoffsetreg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[121]"></a>_dwt_otpread</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _dwt_otpread &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpread
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_dwt_otpread
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AIT_dwt_getxtaltrim
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[129]"></a>_dwt_otpprogword32</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _dwt_otpprogword32 &rArr; __dwt_otp_write_wdata_id_reg &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dwt_otp_write_wdata_id_reg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_otpwriteandverify
</UL>

<P><STRONG><a name="[133]"></a>dwt_enable_rf_tx</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_enable_rf_tx &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
</UL>

<P><STRONG><a name="[125]"></a>_dwt_prog_ldo_and_bias_tune</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_prog_ldo_and_bias_tune &rArr; dwt_modify16bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[13e]"></a>_dwt_kick_dgc_on_wakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _dwt_kick_dgc_on_wakeup &rArr; dwt_modify32bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_restoreconfig
</UL>

<P><STRONG><a name="[12e]"></a>dwt_force_clocks</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_force_clocks &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdwstate
</UL>

<P><STRONG><a name="[137]"></a>dwt_disable_rf_tx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_disable_rf_tx &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
</UL>

<P><STRONG><a name="[136]"></a>dwt_disable_rftx_blocks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_disable_rftx_blocks &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
</UL>

<P><STRONG><a name="[135]"></a>dwt_enable_rftx_blocks</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, deca_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_enable_rftx_blocks &rArr; dwt_modify32bitoffsetreg &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_modify32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcpgcount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcontinuousframemode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configcwmode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_calcbandwidthadj
</UL>

<P><STRONG><a name="[148]"></a>get_sts_mnth</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, deca_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[1b4]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[1d5]"></a>DataStageIn</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[1d7]"></a>NoData_Setup0</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1df]"></a>Data_Setup0</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[1e5]"></a>DataStageOut</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DataStageOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[20f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[229]"></a>TI2_Config</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[227]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[235]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[237]"></a>Lzero</STRONG> (Thumb, 86 bytes, Stack size 1048 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = Lzero
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
</UL>

<P><STRONG><a name="[238]"></a>gpio_state_set</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gpio_state_set &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_gpio_test_cmd
</UL>

<P><STRONG><a name="[239]"></a>handle_gpio_test_cmd</STRONG> (Thumb, 678 bytes, Stack size 40 bytes, ait_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = handle_gpio_test_cmd &rArr; Lzero
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dbg_printf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_state_set
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lzero
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdFunc_ANCHOR_GPIOTEST
</UL>

<P><STRONG><a name="[273]"></a>prepare_twr_resp_msg</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prepare_twr_resp_msg &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Module_Get_SysState_Usercmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_uwb_process
</UL>

<P><STRONG><a name="[277]"></a>twr_uwb_process</STRONG> (Thumb, 804 bytes, Stack size 96 bytes, node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = twr_uwb_process &rArr; OLED_Display &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_twr_output_user
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aiio_output_state
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_tx_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_wifi
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_output_pc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalmanFilter_A
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_twr_resp_msg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testapprun
</UL>

<P><STRONG><a name="[28b]"></a>tag_received_timeout_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tag_received_timeout_set &rArr; dwt_setrxtimeout &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_sy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_timeout_cb
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_rx_tag_cb
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twr_tx_tag_cb
</UL>

<P><STRONG><a name="[28e]"></a>tx_start</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tx_start &rArr; dwt_setrxaftertxdelay &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; dwt_xfer3000 &rArr; _dbg_printf &rArr; USART1_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[296]"></a>prepare_twr_final_msg</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prepare_twr_final_msg &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_us_to_dev_time
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[297]"></a>twr_uwb_process</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = twr_uwb_process
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tagtestapprun
</UL>

<P><STRONG><a name="[2d3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c6]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[2d5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[55]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[2bb]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[2c2]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
